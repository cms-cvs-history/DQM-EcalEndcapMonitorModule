process ECALDQM = { 

     module ecalEBunpacker = EcalDCCUnpackingModule{ }

     module ecalUncalibHit = EcalFixedAlphaBetaFitUncalibRecHitProducer{
#     module ecalUncalibHit = EcalWeightUncalibRecHitProducer{
#     module ecalUncalibHit = EcalAnalFitUncalibRecHitProducer{
       InputTag EBdigiCollection = ecalEBunpacker:
       InputTag EEdigiCollection = ecalEBunpacker:
       string EBhitCollection  = "EcalUncalibRecHitsEB"
       string EEhitCollection  = "EcalUncalibRecHitsEE"
       untracked int32 nMaxPrintout = 0
     }

include "RecoLocalCalo/EcalRecProducers/data/ecalRecHit.cfi"

     replace ecalRecHit.EBuncalibRecHitCollection = ecalUncalibHit:EcalUncalibRecHitsEB
     replace ecalRecHit.EEuncalibRecHitCollection = ecalUncalibHit:EcalUncalibRecHitsEE

include "DQM/EcalEndcapMonitorModule/data/EcalEndcapMonitorModule.cfi"

     replace ecalEndcapMonitorModule.enableMonitorDaemon = false

include "DQM/EcalEndcapMonitorTasks/data/EcalEndcapMonitorTasks.cfi"

include "DQM/EcalEndcapMonitorClient/data/EcalEndcapMonitorClient.cfi"

     replace ecalEndcapMonitorClient.outputFile = "EcalEndcapMonitorClient.root"
     replace ecalEndcapMonitorClient.maskFile = "maskfile.dat"
     replace ecalEndcapMonitorClient.location = "H4"
     replace ecalEndcapMonitorClient.baseHtmlDir = "."
     replace ecalEndcapMonitorClient.enableTCC = true
     replace ecalEndcapMonitorClient.enableMonitorDaemon = false
     replace ecalEndcapMonitorClient.prefixME = ""
     replace ecalEndcapMonitorClient.enableServer = false
     replace ecalEndcapMonitorClient.superModules = { 01 }

     module preScaler = Prescaler{ int32 prescaleFactor = 1 }

     sequence ecalEndcapDataSequence = { preScaler,
                                         ecalEBunpacker,
                                         ecalUncalibHit,
                                         ecalRecHit }

     sequence ecalEndcapMonitorSequence = { ecalEndcapMonitorModule,
                                            ecalEndcapMonitorClient }

     path p = { ecalEndcapDataSequence, ecalEndcapMonitorSequence }
     endpath q = { ecalEndcapCosmicTasksSequence }

     source = DAQEcalTBInputService{ 
       untracked int32 maxEvents = 150
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000006100-SM5-COSMIC-STD' }
#       untracked bool isBinary = false
#--
#       untracked vstring fileNames = { 'file:/tmp/H4-000006187-SM5-LASER-STD' }
#       untracked bool isBinary = false
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000008203-SM5-PEDESTAL-STD' }
#       untracked bool isBinary = false
#---
       untracked vstring fileNames = { 'file:/tmp/H4-000008205-SM5-TEST_PULSE-MGPA' }
       untracked bool isBinary = false
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000008206-SM5-COSMIC-STD' }
#       untracked bool isBinary = false
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000015188-SM5-COSMIC-STD' }
#       untracked bool isBinary = true
#---
#       untracked vstring fileNames = { 'file:/tmp/H4-000015292-SM5-LASER-STD' }
#       untracked bool isBinary = true
     }

     es_source = EcalTrivialConditionRetriever{
       untracked double adcToGeVEBConstant = 0.00875
       untracked vdouble amplWeights = { -0.333, -0.333, -0.333,
                                          0.000,  0.000,  1.000,
                                          0.000,  0.000,  0.000,  0.000 }
       untracked vdouble pedWeights  = {  0.333,  0.333,  0.333,
                                          0.000,  0.000,  0.000,
                                          0.000,  0.000,  0.000,  0.000 }
       untracked vdouble jittWeights = {  0.040,  0.040,  0.040,
                                          0.000,  1.320, -0.050,
                                         -0.500, -0.500, -0.400,  0.000 }
     }

     service = MessageLogger{
       untracked vstring destinations = { "cout" }
       untracked vstring categories = { "EcalTBInputService",
                                        "EcalTBRawToDigi",
                                        "EcalTBRawToDigiTriggerType",
                                        "EcalTBRawToDigiTpg",
                                        "EcalTBRawToDigiNumTowerBlocks",
                                        "EcalTBRawToDigiTowerId",
                                        "EcalTBRawToDigiTowerSize",
                                        "EcalTBRawToDigiChId",
                                        "EcalTBRawToDigiGainZero",
                                        "EcalTBRawToDigiGainSwitch",
                                        "EcalTBRawToDigiDccBlockSize",
                                        "EcalEndcapMonitor"
                                      }
       untracked PSet cout = {
         untracked string threshold = "WARNING"
         untracked PSet default                       = { untracked int32 limit = 0 }
         untracked PSet EcalTBInputService            = { untracked int32 limit = 0 }
         untracked PSet EcalTBRawToDigi               = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiTriggerType    = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiTpg            = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiNumTowerBlocks = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiTowerId        = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiTowerSize      = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiChId           = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiGainZero       = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiGainSwitch     = { untracked int32 limit = 1000 }
         untracked PSet EcalTBRawToDigiDccBlockSize   = { untracked int32 limit = 1000 }
         untracked PSet EcalEndcapMonitor             = { untracked int32 limit = 0 }
         untracked bool noTimeStamps = true
         untracked bool noLineBreaks = true
       }
     }

     service = DaqMonitorROOTBackEnd{ }

}
